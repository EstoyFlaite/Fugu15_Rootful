//
//  iDownloadKRW.swift
//  Fugu15KernelExploit
//
//  Created by Linus Henze.
//  Copyright Â© 2022 Pinauten GmbH. All rights reserved.
//

import Foundation
import iDownload

public class iDownloadKRW: KRWHandler {
    let krw: Fugu15DKKRW
    
    public init(krw: Fugu15DKKRW) {
        self.krw = krw
    }
    
    public func getSupportedActions() -> iDownload.KRWOptions {
        return [.virtRW]
    }
    
    public func getInfo() throws -> (kernelBase: UInt64, slide: UInt64) {
        return (kernelBase: krw.kBase, slide: krw.kBase &- 0xFFFFFFF007004000)
    }
    
    public func resolveAddress(forName: String) throws -> iDownload.KRWAddress? {
        return nil
    }
    
    public func kread(address: iDownload.KRWAddress, size: UInt) throws -> Data {
        guard address.options.isDisjoint(with: [.physical]) else {
            throw KRWError.notSupported
        }
        
        var address = address.address
        var read = Data()
        var remaining = size
        
        while remaining > 0 {
            switch remaining {
            case 1:
                read      += Data(fromObject: try krw.pciDev.r8(address))
                address   += 1
                remaining -= 1
                
            case 2:
                read      += Data(fromObject: try krw.pciDev.r16(address))
                address   += 2
                remaining -= 2
                
            case 4:
                read      += Data(fromObject: try krw.pciDev.r32(address))
                address   += 4
                remaining -= 4
                
            default:
                read      += Data(fromObject: try krw.pciDev.r64(address))
                address   += 8
                remaining -= 8
            }
        }
        
        return read
    }
    
    public func kwrite(address: iDownload.KRWAddress, data: Data) throws {
        guard address.options.isDisjoint(with: [.physical]) else {
            throw KRWError.notSupported
        }
        
        var address = address.address
        var data    = data
        
        while data.count > 0 {
            switch data.count {
            case 1:
                let val = data.getGeneric(type: UInt8.self)
                try krw.pciDev.w8(address, value: val)
                
                address += 1
                data     = data.advanced(by: 1)
                
            case 2:
                let val = data.getGeneric(type: UInt16.self)
                try krw.pciDev.w16(address, value: val)
                
                address += 2
                data     = data.advanced(by: 2)
                
            case 4:
                let val = data.getGeneric(type: UInt32.self)
                try krw.pciDev.w32(address, value: val)
                
                address += 4
                data     = data.advanced(by: 4)
                
            default:
                let val = data.getGeneric(type: UInt64.self)
                try krw.pciDev.w64(address, value: val)
                
                address += 8
                data     = data.advanced(by: 8)
            }
        }
    }
    
    public func kalloc(size: UInt) throws -> UInt64 {
        throw KRWError.notSupported
    }
    
    public func kfree(address: UInt64) throws {
        throw KRWError.notSupported
    }
    
    public func kcall(func: iDownload.KRWAddress, a1: UInt64, a2: UInt64, a3: UInt64, a4: UInt64, a5: UInt64, a6: UInt64, a7: UInt64, a8: UInt64) throws -> UInt64 {
        throw KRWError.notSupported
    }
}
